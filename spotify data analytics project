# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL )

#Then I inserted the Spotify Data .csv into the table.

#Next, I explored the data using the following SQL.

#1-Retrieve the names of tracks with a popularity score above 80.
SELECT track_name, popularity
FROM BIT_DB.spotifydata
WHERE popularity >80
GROUP BY track_name
ORDER BY popularity desc;

#2-Find the average danceability and energy for tracks by a specific artist 
SELECT distinct artist_name, ROUND(AVG(danceability*100),2) AS avg_danceability, ROUND(AVG(energy*100),2) AS avg_energy
FROM BIT_DB.spotifydata
GROUP BY artist_name;

#3-List the top 10 tracks with the highest tempo.
SELECT track_name, tempo
FROM BIT_DB.Spotifydata
ORDER BY tempo desc
LIMIT 10;

#4-Identify the number of tracks in each time signature category.
SELECT time_signature, COUNT(*) AS track_count
FROM BIT_DB.Spotifydata
GROUP BY time_signature;

#5-Retrieve tracks with a duration longer than 200000 ms and sorted by decreasing popularity.
SELECT track_name, duration_ms, popularity
FROM Spotifydata
WHERE duration_ms > 200000
ORDER BY popularity DESC;
